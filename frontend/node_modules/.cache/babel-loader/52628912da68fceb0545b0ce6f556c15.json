{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\roko\\\\Documents\\\\TwitterAPI\\\\frontend\\\\src\\\\App.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport HeaderComponent from \"../src/components/header.component\";\nimport InputSearchComponent from \"../src/components/input.search.component\";\nimport ResultTableComponent from \"../src/components/result.table.component\";\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.tweets = [];\n\n    _this.handleInputSearch = function (e) {\n      return _this.setState({\n        keyword: e\n      });\n    };\n\n    _this.doSearchClick = function (e) {\n      _this.getTweets(_this.state.keyword);\n\n      setTimeout(function () {\n        console.log(_this.tweets);\n      }, 1000);\n    };\n\n    _this.handleInputSearch = _this.handleInputSearch.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      keyword: \"\",\n      tweetsStr: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      // this.getTweets({ keyword });\n      return /*#__PURE__*/React.createElement(Router, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/\",\n        label: \"Home\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }\n      }, \"Home\"), /*#__PURE__*/React.createElement(Link, {\n        to: \"/statistics\",\n        label: \"About\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }\n      }, \"Statistics\"), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(HeaderComponent, {\n        title: \"Mockup for TwitterAPI\",\n        description: \"ReactJS + ExpressJS + NodeJS + TwitterAPI\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(InputSearchComponent, {\n        onInputChange: this.handleInputSearch,\n        doSearchClick: this.doSearchClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"resultArea\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }\n      }, this.tweets, /*#__PURE__*/React.createElement(ResultTableComponent, {\n        tweets: this.state.tweetsStr,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Switch, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Route, {\n        path: \"/statistics\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"getTweets\",\n    value: function () {\n      var _getTweets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(keyword) {\n        var _this2 = this;\n\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(keyword.length > 0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return axios.get(\"http://localhost:4000/\" + keyword);\n\n              case 4:\n                result = _context.sent;\n                this.setState({\n                  tweetsStr: JSON.stringify(result.data)\n                });\n                this.tweets = JSON.parse(this.state.tweetsStr);\n                JSON.parse(this.tweets).forEach(function (element) {\n                  _this2.state.list.push(element);\n                });\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                console.error(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 10]]);\n      }));\n\n      function getTweets(_x) {\n        return _getTweets.apply(this, arguments);\n      }\n\n      return getTweets;\n    }()\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/Users/roko/Documents/TwitterAPI/frontend/src/App.js"],"names":["React","axios","BrowserRouter","Router","Switch","Route","Link","HeaderComponent","InputSearchComponent","ResultTableComponent","App","props","tweets","handleInputSearch","e","setState","keyword","doSearchClick","getTweets","state","setTimeout","console","log","bind","tweetsStr","length","get","result","JSON","stringify","data","parse","forEach","element","list","push","error","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport HeaderComponent from \"../src/components/header.component\";\nimport InputSearchComponent from \"../src/components/input.search.component\";\nimport ResultTableComponent from \"../src/components/result.table.component\";\n\nexport default class App extends React.Component {\n\n  tweets = [];\n  constructor(props) {\n    super(props);\n    this.handleInputSearch = this.handleInputSearch.bind(this);\n    this.state = { keyword: \"\", tweetsStr: \"\" };\n  }\n\n  handleInputSearch = (e) => this.setState({ keyword: e });\n  doSearchClick = (e) => {\n    this.getTweets(this.state.keyword);\n    setTimeout(() => {\n      console.log(this.tweets);\n    }, 1000);\n  }\n  render() {\n    // this.getTweets({ keyword });\n    return (\n      <Router>\n        <div>\n          <Link to=\"/\" label=\"Home\">Home</Link>\n          <Link to=\"/statistics\" label=\"About\">Statistics</Link>\n          <hr />\n          <div className=\"App container\">\n            <HeaderComponent\n              title=\"Mockup for TwitterAPI\"\n              description=\"ReactJS + ExpressJS + NodeJS + TwitterAPI\"\n            />\n            <InputSearchComponent onInputChange={this.handleInputSearch} doSearchClick={this.doSearchClick} />\n          </div>\n          <div className=\"resultArea\">\n            <div className=\"container\">\n              {this.tweets}\n              <ResultTableComponent tweets={this.state.tweetsStr} />\n            </div>\n          </div>\n\n          <Switch>\n            <Route exact path=\"/\">\n              {/* <Home /> */}\n            </Route>\n            <Route path=\"/statistics\">\n              {/* <About /> */}\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n\n  async getTweets(keyword) {\n    if (keyword.length > 0)\n      try {\n        const result = await axios.get(\"http://localhost:4000/\" + keyword);\n        this.setState({ tweetsStr: JSON.stringify(result.data) });\n        this.tweets = JSON.parse(this.state.tweetsStr);\n        JSON.parse(this.tweets).forEach(element => {\n          this.state.list.push(element);\n        });\n      } catch (error) {\n        console.error(error);\n      }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}